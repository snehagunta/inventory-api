// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kessel/inventory/v1beta2/inventory_service.proto

package v1beta2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KesselInventoryService_Check_FullMethodName               = "/kessel.inventory.v1beta2.KesselInventoryService/Check"
	KesselInventoryService_CheckForUpdate_FullMethodName      = "/kessel.inventory.v1beta2.KesselInventoryService/CheckForUpdate"
	KesselInventoryService_ReportResource_FullMethodName      = "/kessel.inventory.v1beta2.KesselInventoryService/ReportResource"
	KesselInventoryService_DeleteResource_FullMethodName      = "/kessel.inventory.v1beta2.KesselInventoryService/DeleteResource"
	KesselInventoryService_StreamedListObjects_FullMethodName = "/kessel.inventory.v1beta2.KesselInventoryService/StreamedListObjects"
)

// KesselInventoryServiceClient is the client API for KesselInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KesselInventoryService provides APIs to perform relationship checks
// and manage inventory resource lifecycles (reporting and deletion).
type KesselInventoryServiceClient interface {
	// Performs an relationship check to determine whether a subject has a specific
	// permission or relationship on a resource.
	//
	// This API evaluates whether the provided subject is a member of the specified relation
	// (e.g., "viewer", "editor", "admin") on the target object. It answers the question:
	// "Does subject *X* have relation *Y* on object *Z*?"
	//
	// Common use cases include enforcing read access, conditional UI visibility,
	// or authorization gating for downstream API calls.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// Performs a strongly consistent relationship check to determine whether a subject
	// has a specific relation to an object (representing, for example, a permission).
	//
	// This API answers the question:
	// "Is subject *X* currently authorized to update or modify resource *Y*?"
	// Unlike the basic `Check` endpoint, this method guarantees a fully up-to-date
	// view of the relationship state (e.g., not relying on cached or eventually consistent data).
	//
	// It is intended to be used just prior to sensitive operation (e.g., update, delete)
	// which depend on the current state of the relationship.
	CheckForUpdate(ctx context.Context, in *CheckForUpdateRequest, opts ...grpc.CallOption) (*CheckForUpdateResponse, error)
	// Reports to Kessel Inventory that a Resource has been created or has been updated.
	//
	// Reporters can use this API to report facts about their resources in order to
	// facilitate integration, correlation, and access control.
	//
	// Each call can include:
	// - Reporter-specific attributes and relationships (`representations.reporter`)
	// - Shared attributes and relationships common to all reporters (`representations.common`)
	// - Identifiers and metadata that allow correlation to an existing resource
	//
	// Multiple reporters may report representations for the same resource.
	// Kessel Inventory correlates these
	// based on correlation keys provided for a given resource type
	//
	// # All versions of your reported facts will be retained and can be queried as needed
	//
	// The relationships reported through this API are used to determine relationship check outcomes
	// via the Check and CheckForUpdate APIs.
	//
	// Reporters are responsible for ensuring delivery guarantees and message ordering
	// appropriate to the sensitivity and consistency needs of their use case.
	//
	// This API does **not** guarantee immediate read-your-writes consistency by default.
	//
	//	If a reporter requires newly submitted resources or relationships to be visible
	//
	// in subsequent checks (e.g., `Check`), the request must explicitly set
	// `write_visibility = IMMEDIATE`.
	ReportResource(ctx context.Context, in *ReportResourceRequest, opts ...grpc.CallOption) (*ReportResourceResponse, error)
	// Reports to Kessel Inventory that a Reporter's representation of a Resource has been deleted.
	//
	// This operation is typically used when a resource has been decommissioned or
	// is no longer reported by any authorized system.
	//
	// As a result, relationship checks performed via the `Check` and
	// `CheckForUpdate` APIs will no longer resolve positively for the deleted
	// resource. Any decisions that depend on relationships tied to
	// this resource will be affected.
	//
	// As an example, it can revoke previously granted access across the system.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// Streams a list of objects where the given subject has the specified relation.
	//
	// This relationship query answers the question:
	// "Which objects of type *X* does subject *Y* have the *Z* relation to?"
	//
	// It is often used to power user-facing dashboards, filtered UIs, or policy-driven
	// access lists. The result is streamed incrementally to support large datasets and
	// reduce client-side latency or memory pressure.
	//
	// Pagination and consistency controls allow fine-tuned performance and data freshness.
	StreamedListObjects(ctx context.Context, in *StreamedListObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedListObjectsResponse], error)
}

type kesselInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKesselInventoryServiceClient(cc grpc.ClientConnInterface) KesselInventoryServiceClient {
	return &kesselInventoryServiceClient{cc}
}

func (c *kesselInventoryServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, KesselInventoryService_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselInventoryServiceClient) CheckForUpdate(ctx context.Context, in *CheckForUpdateRequest, opts ...grpc.CallOption) (*CheckForUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckForUpdateResponse)
	err := c.cc.Invoke(ctx, KesselInventoryService_CheckForUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselInventoryServiceClient) ReportResource(ctx context.Context, in *ReportResourceRequest, opts ...grpc.CallOption) (*ReportResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResourceResponse)
	err := c.cc.Invoke(ctx, KesselInventoryService_ReportResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselInventoryServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, KesselInventoryService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselInventoryServiceClient) StreamedListObjects(ctx context.Context, in *StreamedListObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedListObjectsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KesselInventoryService_ServiceDesc.Streams[0], KesselInventoryService_StreamedListObjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamedListObjectsRequest, StreamedListObjectsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KesselInventoryService_StreamedListObjectsClient = grpc.ServerStreamingClient[StreamedListObjectsResponse]

// KesselInventoryServiceServer is the server API for KesselInventoryService service.
// All implementations must embed UnimplementedKesselInventoryServiceServer
// for forward compatibility.
//
// KesselInventoryService provides APIs to perform relationship checks
// and manage inventory resource lifecycles (reporting and deletion).
type KesselInventoryServiceServer interface {
	// Performs an relationship check to determine whether a subject has a specific
	// permission or relationship on a resource.
	//
	// This API evaluates whether the provided subject is a member of the specified relation
	// (e.g., "viewer", "editor", "admin") on the target object. It answers the question:
	// "Does subject *X* have relation *Y* on object *Z*?"
	//
	// Common use cases include enforcing read access, conditional UI visibility,
	// or authorization gating for downstream API calls.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// Performs a strongly consistent relationship check to determine whether a subject
	// has a specific relation to an object (representing, for example, a permission).
	//
	// This API answers the question:
	// "Is subject *X* currently authorized to update or modify resource *Y*?"
	// Unlike the basic `Check` endpoint, this method guarantees a fully up-to-date
	// view of the relationship state (e.g., not relying on cached or eventually consistent data).
	//
	// It is intended to be used just prior to sensitive operation (e.g., update, delete)
	// which depend on the current state of the relationship.
	CheckForUpdate(context.Context, *CheckForUpdateRequest) (*CheckForUpdateResponse, error)
	// Reports to Kessel Inventory that a Resource has been created or has been updated.
	//
	// Reporters can use this API to report facts about their resources in order to
	// facilitate integration, correlation, and access control.
	//
	// Each call can include:
	// - Reporter-specific attributes and relationships (`representations.reporter`)
	// - Shared attributes and relationships common to all reporters (`representations.common`)
	// - Identifiers and metadata that allow correlation to an existing resource
	//
	// Multiple reporters may report representations for the same resource.
	// Kessel Inventory correlates these
	// based on correlation keys provided for a given resource type
	//
	// # All versions of your reported facts will be retained and can be queried as needed
	//
	// The relationships reported through this API are used to determine relationship check outcomes
	// via the Check and CheckForUpdate APIs.
	//
	// Reporters are responsible for ensuring delivery guarantees and message ordering
	// appropriate to the sensitivity and consistency needs of their use case.
	//
	// This API does **not** guarantee immediate read-your-writes consistency by default.
	//
	//	If a reporter requires newly submitted resources or relationships to be visible
	//
	// in subsequent checks (e.g., `Check`), the request must explicitly set
	// `write_visibility = IMMEDIATE`.
	ReportResource(context.Context, *ReportResourceRequest) (*ReportResourceResponse, error)
	// Reports to Kessel Inventory that a Reporter's representation of a Resource has been deleted.
	//
	// This operation is typically used when a resource has been decommissioned or
	// is no longer reported by any authorized system.
	//
	// As a result, relationship checks performed via the `Check` and
	// `CheckForUpdate` APIs will no longer resolve positively for the deleted
	// resource. Any decisions that depend on relationships tied to
	// this resource will be affected.
	//
	// As an example, it can revoke previously granted access across the system.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// Streams a list of objects where the given subject has the specified relation.
	//
	// This relationship query answers the question:
	// "Which objects of type *X* does subject *Y* have the *Z* relation to?"
	//
	// It is often used to power user-facing dashboards, filtered UIs, or policy-driven
	// access lists. The result is streamed incrementally to support large datasets and
	// reduce client-side latency or memory pressure.
	//
	// Pagination and consistency controls allow fine-tuned performance and data freshness.
	StreamedListObjects(*StreamedListObjectsRequest, grpc.ServerStreamingServer[StreamedListObjectsResponse]) error
	mustEmbedUnimplementedKesselInventoryServiceServer()
}

// UnimplementedKesselInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKesselInventoryServiceServer struct{}

func (UnimplementedKesselInventoryServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedKesselInventoryServiceServer) CheckForUpdate(context.Context, *CheckForUpdateRequest) (*CheckForUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdate not implemented")
}
func (UnimplementedKesselInventoryServiceServer) ReportResource(context.Context, *ReportResourceRequest) (*ReportResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResource not implemented")
}
func (UnimplementedKesselInventoryServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedKesselInventoryServiceServer) StreamedListObjects(*StreamedListObjectsRequest, grpc.ServerStreamingServer[StreamedListObjectsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamedListObjects not implemented")
}
func (UnimplementedKesselInventoryServiceServer) mustEmbedUnimplementedKesselInventoryServiceServer() {
}
func (UnimplementedKesselInventoryServiceServer) testEmbeddedByValue() {}

// UnsafeKesselInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KesselInventoryServiceServer will
// result in compilation errors.
type UnsafeKesselInventoryServiceServer interface {
	mustEmbedUnimplementedKesselInventoryServiceServer()
}

func RegisterKesselInventoryServiceServer(s grpc.ServiceRegistrar, srv KesselInventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedKesselInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KesselInventoryService_ServiceDesc, srv)
}

func _KesselInventoryService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselInventoryService_CheckForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckForUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryServiceServer).CheckForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryService_CheckForUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryServiceServer).CheckForUpdate(ctx, req.(*CheckForUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselInventoryService_ReportResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryServiceServer).ReportResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryService_ReportResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryServiceServer).ReportResource(ctx, req.(*ReportResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselInventoryService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselInventoryServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselInventoryService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselInventoryServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselInventoryService_StreamedListObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamedListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KesselInventoryServiceServer).StreamedListObjects(m, &grpc.GenericServerStream[StreamedListObjectsRequest, StreamedListObjectsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KesselInventoryService_StreamedListObjectsServer = grpc.ServerStreamingServer[StreamedListObjectsResponse]

// KesselInventoryService_ServiceDesc is the grpc.ServiceDesc for KesselInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KesselInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kessel.inventory.v1beta2.KesselInventoryService",
	HandlerType: (*KesselInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _KesselInventoryService_Check_Handler,
		},
		{
			MethodName: "CheckForUpdate",
			Handler:    _KesselInventoryService_CheckForUpdate_Handler,
		},
		{
			MethodName: "ReportResource",
			Handler:    _KesselInventoryService_ReportResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _KesselInventoryService_DeleteResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamedListObjects",
			Handler:       _KesselInventoryService_StreamedListObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kessel/inventory/v1beta2/inventory_service.proto",
}
