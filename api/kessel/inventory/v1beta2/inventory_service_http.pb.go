// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta2/inventory_service.proto

package v1beta2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselInventoryServiceCheck = "/kessel.inventory.v1beta2.KesselInventoryService/Check"
const OperationKesselInventoryServiceCheckForUpdate = "/kessel.inventory.v1beta2.KesselInventoryService/CheckForUpdate"
const OperationKesselInventoryServiceDeleteResource = "/kessel.inventory.v1beta2.KesselInventoryService/DeleteResource"
const OperationKesselInventoryServiceReportResource = "/kessel.inventory.v1beta2.KesselInventoryService/ReportResource"

type KesselInventoryServiceHTTPServer interface {
	// Check Performs an relationship check to determine whether a subject has a specific
	// permission or relationship on a resource.
	//
	// This API evaluates whether the provided subject is a member of the specified relation
	// (e.g., "viewer", "editor", "admin") on the target object. It answers the question:
	// "Does subject *X* have relation *Y* on object *Z*?"
	//
	// Common use cases include enforcing read access, conditional UI visibility,
	// or authorization gating for downstream API calls.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// CheckForUpdate Performs a strongly consistent relationship check to determine whether a subject
	// has a specific relation to an object (representing, for example, a permission).
	//
	// This API answers the question:
	// "Is subject *X* currently authorized to update or modify resource *Y*?"
	// Unlike the basic `Check` endpoint, this method guarantees a fully up-to-date
	// view of the relationship state (e.g., not relying on cached or eventually consistent data).
	//
	// It is intended to be used just prior to sensitive operation (e.g., update, delete)
	// which depend on the current state of the relationship.
	CheckForUpdate(context.Context, *CheckForUpdateRequest) (*CheckForUpdateResponse, error)
	// DeleteResource Reports to Kessel Inventory that a Reporter's representation of a Resource has been deleted.
	//
	// This operation is typically used when a resource has been decommissioned or
	// is no longer reported by any authorized system.
	//
	// As a result, relationship checks performed via the `Check` and
	// `CheckForUpdate` APIs will no longer resolve positively for the deleted
	// resource. Any decisions that depend on relationships tied to
	// this resource will be affected.
	//
	// As an example, it can revoke previously granted access across the system.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// ReportResource Reports to Kessel Inventory that a Resource has been created or has been updated.
	//
	// Reporters can use this API to report facts about their resources in order to
	// facilitate integration, correlation, and access control.
	//
	// Each call can include:
	// - Reporter-specific attributes and relationships (`representations.reporter`)
	// - Shared attributes and relationships common to all reporters (`representations.common`)
	// - Identifiers and metadata that allow correlation to an existing resource
	//
	// Multiple reporters may report representations for the same resource.
	// Kessel Inventory correlates these
	// based on correlation keys provided for a given resource type
	//
	// All versions of your reported facts will be retained and can be queried as needed
	//
	// The relationships reported through this API are used to determine relationship check outcomes
	// via the Check and CheckForUpdate APIs.
	//
	// Reporters are responsible for ensuring delivery guarantees and message ordering
	// appropriate to the sensitivity and consistency needs of their use case.
	//
	// This API does **not** guarantee immediate read-your-writes consistency by default.
	//  If a reporter requires newly submitted resources or relationships to be visible
	// in subsequent checks (e.g., `Check`), the request must explicitly set
	// `write_visibility = IMMEDIATE`.
	//
	//
	ReportResource(context.Context, *ReportResourceRequest) (*ReportResourceResponse, error)
}

func RegisterKesselInventoryServiceHTTPServer(s *http.Server, srv KesselInventoryServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta2/check", _KesselInventoryService_Check0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta2/checkforupdate", _KesselInventoryService_CheckForUpdate0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1beta2/resources", _KesselInventoryService_ReportResource0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta2/resources", _KesselInventoryService_DeleteResource0_HTTP_Handler(srv))
}

func _KesselInventoryService_Check0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_CheckForUpdate0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckForUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceCheckForUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckForUpdate(ctx, req.(*CheckForUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckForUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_ReportResource0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceReportResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportResource(ctx, req.(*ReportResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselInventoryService_DeleteResource0_HTTP_Handler(srv KesselInventoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselInventoryServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceResponse)
		return ctx.Result(200, reply)
	}
}

type KesselInventoryServiceHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
	CheckForUpdate(ctx context.Context, req *CheckForUpdateRequest, opts ...http.CallOption) (rsp *CheckForUpdateResponse, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *DeleteResourceResponse, err error)
	ReportResource(ctx context.Context, req *ReportResourceRequest, opts ...http.CallOption) (rsp *ReportResourceResponse, err error)
}

type KesselInventoryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselInventoryServiceHTTPClient(client *http.Client) KesselInventoryServiceHTTPClient {
	return &KesselInventoryServiceHTTPClientImpl{client}
}

func (c *KesselInventoryServiceHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/api/inventory/v1beta2/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) CheckForUpdate(ctx context.Context, in *CheckForUpdateRequest, opts ...http.CallOption) (*CheckForUpdateResponse, error) {
	var out CheckForUpdateResponse
	pattern := "/api/inventory/v1beta2/checkforupdate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceCheckForUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*DeleteResourceResponse, error) {
	var out DeleteResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselInventoryServiceHTTPClientImpl) ReportResource(ctx context.Context, in *ReportResourceRequest, opts ...http.CallOption) (*ReportResourceResponse, error) {
	var out ReportResourceResponse
	pattern := "/api/inventory/v1beta2/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselInventoryServiceReportResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
